
Stm32Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cc0  080000b4  080000b4  000010b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08000d74  08000d74  00001d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000dd0  08000dd0  00001dd8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000dd0  08000dd0  00001dd8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000dd0  08000dd8  00001dd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dd0  08000dd0  00001dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000dd4  08000dd4  00001dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001dd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000dd8  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000dd8  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00001dd8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ac6  00000000  00000000  00001e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003f6  00000000  00000000  000028c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f8  00000000  00000000  00002cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000ae  00000000  00000000  00002db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001d62  00000000  00000000  00002e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000011f5  00000000  00000000  00004bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007e24  00000000  00000000  00005dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000dbe1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000288  00000000  00000000  0000dc24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0000deac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	@ (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	@ (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	@ (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	20000000 	.word	0x20000000
 80000d4:	00000000 	.word	0x00000000
 80000d8:	08000d5c 	.word	0x08000d5c

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	@ (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	@ (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	@ (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			@ (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	20000004 	.word	0x20000004
 80000f8:	08000d5c 	.word	0x08000d5c

080000fc <__divsi3>:
 80000fc:	4603      	mov	r3, r0
 80000fe:	430b      	orrs	r3, r1
 8000100:	d47f      	bmi.n	8000202 <__divsi3+0x106>
 8000102:	2200      	movs	r2, #0
 8000104:	0843      	lsrs	r3, r0, #1
 8000106:	428b      	cmp	r3, r1
 8000108:	d374      	bcc.n	80001f4 <__divsi3+0xf8>
 800010a:	0903      	lsrs	r3, r0, #4
 800010c:	428b      	cmp	r3, r1
 800010e:	d35f      	bcc.n	80001d0 <__divsi3+0xd4>
 8000110:	0a03      	lsrs	r3, r0, #8
 8000112:	428b      	cmp	r3, r1
 8000114:	d344      	bcc.n	80001a0 <__divsi3+0xa4>
 8000116:	0b03      	lsrs	r3, r0, #12
 8000118:	428b      	cmp	r3, r1
 800011a:	d328      	bcc.n	800016e <__divsi3+0x72>
 800011c:	0c03      	lsrs	r3, r0, #16
 800011e:	428b      	cmp	r3, r1
 8000120:	d30d      	bcc.n	800013e <__divsi3+0x42>
 8000122:	22ff      	movs	r2, #255	@ 0xff
 8000124:	0209      	lsls	r1, r1, #8
 8000126:	ba12      	rev	r2, r2
 8000128:	0c03      	lsrs	r3, r0, #16
 800012a:	428b      	cmp	r3, r1
 800012c:	d302      	bcc.n	8000134 <__divsi3+0x38>
 800012e:	1212      	asrs	r2, r2, #8
 8000130:	0209      	lsls	r1, r1, #8
 8000132:	d065      	beq.n	8000200 <__divsi3+0x104>
 8000134:	0b03      	lsrs	r3, r0, #12
 8000136:	428b      	cmp	r3, r1
 8000138:	d319      	bcc.n	800016e <__divsi3+0x72>
 800013a:	e000      	b.n	800013e <__divsi3+0x42>
 800013c:	0a09      	lsrs	r1, r1, #8
 800013e:	0bc3      	lsrs	r3, r0, #15
 8000140:	428b      	cmp	r3, r1
 8000142:	d301      	bcc.n	8000148 <__divsi3+0x4c>
 8000144:	03cb      	lsls	r3, r1, #15
 8000146:	1ac0      	subs	r0, r0, r3
 8000148:	4152      	adcs	r2, r2
 800014a:	0b83      	lsrs	r3, r0, #14
 800014c:	428b      	cmp	r3, r1
 800014e:	d301      	bcc.n	8000154 <__divsi3+0x58>
 8000150:	038b      	lsls	r3, r1, #14
 8000152:	1ac0      	subs	r0, r0, r3
 8000154:	4152      	adcs	r2, r2
 8000156:	0b43      	lsrs	r3, r0, #13
 8000158:	428b      	cmp	r3, r1
 800015a:	d301      	bcc.n	8000160 <__divsi3+0x64>
 800015c:	034b      	lsls	r3, r1, #13
 800015e:	1ac0      	subs	r0, r0, r3
 8000160:	4152      	adcs	r2, r2
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d301      	bcc.n	800016c <__divsi3+0x70>
 8000168:	030b      	lsls	r3, r1, #12
 800016a:	1ac0      	subs	r0, r0, r3
 800016c:	4152      	adcs	r2, r2
 800016e:	0ac3      	lsrs	r3, r0, #11
 8000170:	428b      	cmp	r3, r1
 8000172:	d301      	bcc.n	8000178 <__divsi3+0x7c>
 8000174:	02cb      	lsls	r3, r1, #11
 8000176:	1ac0      	subs	r0, r0, r3
 8000178:	4152      	adcs	r2, r2
 800017a:	0a83      	lsrs	r3, r0, #10
 800017c:	428b      	cmp	r3, r1
 800017e:	d301      	bcc.n	8000184 <__divsi3+0x88>
 8000180:	028b      	lsls	r3, r1, #10
 8000182:	1ac0      	subs	r0, r0, r3
 8000184:	4152      	adcs	r2, r2
 8000186:	0a43      	lsrs	r3, r0, #9
 8000188:	428b      	cmp	r3, r1
 800018a:	d301      	bcc.n	8000190 <__divsi3+0x94>
 800018c:	024b      	lsls	r3, r1, #9
 800018e:	1ac0      	subs	r0, r0, r3
 8000190:	4152      	adcs	r2, r2
 8000192:	0a03      	lsrs	r3, r0, #8
 8000194:	428b      	cmp	r3, r1
 8000196:	d301      	bcc.n	800019c <__divsi3+0xa0>
 8000198:	020b      	lsls	r3, r1, #8
 800019a:	1ac0      	subs	r0, r0, r3
 800019c:	4152      	adcs	r2, r2
 800019e:	d2cd      	bcs.n	800013c <__divsi3+0x40>
 80001a0:	09c3      	lsrs	r3, r0, #7
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__divsi3+0xae>
 80001a6:	01cb      	lsls	r3, r1, #7
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0983      	lsrs	r3, r0, #6
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__divsi3+0xba>
 80001b2:	018b      	lsls	r3, r1, #6
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0943      	lsrs	r3, r0, #5
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__divsi3+0xc6>
 80001be:	014b      	lsls	r3, r1, #5
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0903      	lsrs	r3, r0, #4
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__divsi3+0xd2>
 80001ca:	010b      	lsls	r3, r1, #4
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	08c3      	lsrs	r3, r0, #3
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__divsi3+0xde>
 80001d6:	00cb      	lsls	r3, r1, #3
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0883      	lsrs	r3, r0, #2
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__divsi3+0xea>
 80001e2:	008b      	lsls	r3, r1, #2
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	0843      	lsrs	r3, r0, #1
 80001ea:	428b      	cmp	r3, r1
 80001ec:	d301      	bcc.n	80001f2 <__divsi3+0xf6>
 80001ee:	004b      	lsls	r3, r1, #1
 80001f0:	1ac0      	subs	r0, r0, r3
 80001f2:	4152      	adcs	r2, r2
 80001f4:	1a41      	subs	r1, r0, r1
 80001f6:	d200      	bcs.n	80001fa <__divsi3+0xfe>
 80001f8:	4601      	mov	r1, r0
 80001fa:	4152      	adcs	r2, r2
 80001fc:	4610      	mov	r0, r2
 80001fe:	4770      	bx	lr
 8000200:	e05d      	b.n	80002be <__divsi3+0x1c2>
 8000202:	0fca      	lsrs	r2, r1, #31
 8000204:	d000      	beq.n	8000208 <__divsi3+0x10c>
 8000206:	4249      	negs	r1, r1
 8000208:	1003      	asrs	r3, r0, #32
 800020a:	d300      	bcc.n	800020e <__divsi3+0x112>
 800020c:	4240      	negs	r0, r0
 800020e:	4053      	eors	r3, r2
 8000210:	2200      	movs	r2, #0
 8000212:	469c      	mov	ip, r3
 8000214:	0903      	lsrs	r3, r0, #4
 8000216:	428b      	cmp	r3, r1
 8000218:	d32d      	bcc.n	8000276 <__divsi3+0x17a>
 800021a:	0a03      	lsrs	r3, r0, #8
 800021c:	428b      	cmp	r3, r1
 800021e:	d312      	bcc.n	8000246 <__divsi3+0x14a>
 8000220:	22fc      	movs	r2, #252	@ 0xfc
 8000222:	0189      	lsls	r1, r1, #6
 8000224:	ba12      	rev	r2, r2
 8000226:	0a03      	lsrs	r3, r0, #8
 8000228:	428b      	cmp	r3, r1
 800022a:	d30c      	bcc.n	8000246 <__divsi3+0x14a>
 800022c:	0189      	lsls	r1, r1, #6
 800022e:	1192      	asrs	r2, r2, #6
 8000230:	428b      	cmp	r3, r1
 8000232:	d308      	bcc.n	8000246 <__divsi3+0x14a>
 8000234:	0189      	lsls	r1, r1, #6
 8000236:	1192      	asrs	r2, r2, #6
 8000238:	428b      	cmp	r3, r1
 800023a:	d304      	bcc.n	8000246 <__divsi3+0x14a>
 800023c:	0189      	lsls	r1, r1, #6
 800023e:	d03a      	beq.n	80002b6 <__divsi3+0x1ba>
 8000240:	1192      	asrs	r2, r2, #6
 8000242:	e000      	b.n	8000246 <__divsi3+0x14a>
 8000244:	0989      	lsrs	r1, r1, #6
 8000246:	09c3      	lsrs	r3, r0, #7
 8000248:	428b      	cmp	r3, r1
 800024a:	d301      	bcc.n	8000250 <__divsi3+0x154>
 800024c:	01cb      	lsls	r3, r1, #7
 800024e:	1ac0      	subs	r0, r0, r3
 8000250:	4152      	adcs	r2, r2
 8000252:	0983      	lsrs	r3, r0, #6
 8000254:	428b      	cmp	r3, r1
 8000256:	d301      	bcc.n	800025c <__divsi3+0x160>
 8000258:	018b      	lsls	r3, r1, #6
 800025a:	1ac0      	subs	r0, r0, r3
 800025c:	4152      	adcs	r2, r2
 800025e:	0943      	lsrs	r3, r0, #5
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x16c>
 8000264:	014b      	lsls	r3, r1, #5
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0903      	lsrs	r3, r0, #4
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x178>
 8000270:	010b      	lsls	r3, r1, #4
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	08c3      	lsrs	r3, r0, #3
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x184>
 800027c:	00cb      	lsls	r3, r1, #3
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0883      	lsrs	r3, r0, #2
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x190>
 8000288:	008b      	lsls	r3, r1, #2
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	d2d9      	bcs.n	8000244 <__divsi3+0x148>
 8000290:	0843      	lsrs	r3, r0, #1
 8000292:	428b      	cmp	r3, r1
 8000294:	d301      	bcc.n	800029a <__divsi3+0x19e>
 8000296:	004b      	lsls	r3, r1, #1
 8000298:	1ac0      	subs	r0, r0, r3
 800029a:	4152      	adcs	r2, r2
 800029c:	1a41      	subs	r1, r0, r1
 800029e:	d200      	bcs.n	80002a2 <__divsi3+0x1a6>
 80002a0:	4601      	mov	r1, r0
 80002a2:	4663      	mov	r3, ip
 80002a4:	4152      	adcs	r2, r2
 80002a6:	105b      	asrs	r3, r3, #1
 80002a8:	4610      	mov	r0, r2
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x1b4>
 80002ac:	4240      	negs	r0, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d500      	bpl.n	80002b4 <__divsi3+0x1b8>
 80002b2:	4249      	negs	r1, r1
 80002b4:	4770      	bx	lr
 80002b6:	4663      	mov	r3, ip
 80002b8:	105b      	asrs	r3, r3, #1
 80002ba:	d300      	bcc.n	80002be <__divsi3+0x1c2>
 80002bc:	4240      	negs	r0, r0
 80002be:	b501      	push	{r0, lr}
 80002c0:	2000      	movs	r0, #0
 80002c2:	f000 f805 	bl	80002d0 <__aeabi_idiv0>
 80002c6:	bd02      	pop	{r1, pc}

080002c8 <__aeabi_idivmod>:
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d0f8      	beq.n	80002be <__divsi3+0x1c2>
 80002cc:	e716      	b.n	80000fc <__divsi3>
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_idiv0>:
 80002d0:	4770      	bx	lr
 80002d2:	46c0      	nop			@ (mov r8, r8)

080002d4 <LCD_Init>:
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};

//Funcion que inicializa el LCD a 4 bits
void LCD_Init(void){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
	int8_t const *p;
/**
  * Habilitamos las señales de reloj para los puertos I/O
	*/
	RCC->IOPENR		|=	( 0x1UL <<  1U );
 80002da:	4bad      	ldr	r3, [pc, #692]	@ (8000590 <LCD_Init+0x2bc>)
 80002dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80002de:	4bac      	ldr	r3, [pc, #688]	@ (8000590 <LCD_Init+0x2bc>)
 80002e0:	2102      	movs	r1, #2
 80002e2:	430a      	orrs	r2, r1
 80002e4:	635a      	str	r2, [r3, #52]	@ 0x34

/**
  * Configuración de los pines de control (RS, RW, EN) como GP output PP
	*/
	GPIOB->PUPDR  &= ~( 0x3UL << 18U );
 80002e6:	4bab      	ldr	r3, [pc, #684]	@ (8000594 <LCD_Init+0x2c0>)
 80002e8:	68da      	ldr	r2, [r3, #12]
 80002ea:	4baa      	ldr	r3, [pc, #680]	@ (8000594 <LCD_Init+0x2c0>)
 80002ec:	49aa      	ldr	r1, [pc, #680]	@ (8000598 <LCD_Init+0x2c4>)
 80002ee:	400a      	ands	r2, r1
 80002f0:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL <<  9U );
 80002f2:	4ba8      	ldr	r3, [pc, #672]	@ (8000594 <LCD_Init+0x2c0>)
 80002f4:	685a      	ldr	r2, [r3, #4]
 80002f6:	4ba7      	ldr	r3, [pc, #668]	@ (8000594 <LCD_Init+0x2c0>)
 80002f8:	49a8      	ldr	r1, [pc, #672]	@ (800059c <LCD_Init+0x2c8>)
 80002fa:	400a      	ands	r2, r1
 80002fc:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 18U );
 80002fe:	4ba5      	ldr	r3, [pc, #660]	@ (8000594 <LCD_Init+0x2c0>)
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	4ba4      	ldr	r3, [pc, #656]	@ (8000594 <LCD_Init+0x2c0>)
 8000304:	49a6      	ldr	r1, [pc, #664]	@ (80005a0 <LCD_Init+0x2cc>)
 8000306:	400a      	ands	r2, r1
 8000308:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 18U );
 800030a:	4ba2      	ldr	r3, [pc, #648]	@ (8000594 <LCD_Init+0x2c0>)
 800030c:	681a      	ldr	r2, [r3, #0]
 800030e:	4ba1      	ldr	r3, [pc, #644]	@ (8000594 <LCD_Init+0x2c0>)
 8000310:	2180      	movs	r1, #128	@ 0x80
 8000312:	02c9      	lsls	r1, r1, #11
 8000314:	430a      	orrs	r2, r1
 8000316:	601a      	str	r2, [r3, #0]

	GPIOB->PUPDR  &= ~( 0x3UL << 20U );
 8000318:	4b9e      	ldr	r3, [pc, #632]	@ (8000594 <LCD_Init+0x2c0>)
 800031a:	68da      	ldr	r2, [r3, #12]
 800031c:	4b9d      	ldr	r3, [pc, #628]	@ (8000594 <LCD_Init+0x2c0>)
 800031e:	49a1      	ldr	r1, [pc, #644]	@ (80005a4 <LCD_Init+0x2d0>)
 8000320:	400a      	ands	r2, r1
 8000322:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 10U );
 8000324:	4b9b      	ldr	r3, [pc, #620]	@ (8000594 <LCD_Init+0x2c0>)
 8000326:	685a      	ldr	r2, [r3, #4]
 8000328:	4b9a      	ldr	r3, [pc, #616]	@ (8000594 <LCD_Init+0x2c0>)
 800032a:	499f      	ldr	r1, [pc, #636]	@ (80005a8 <LCD_Init+0x2d4>)
 800032c:	400a      	ands	r2, r1
 800032e:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 20U );
 8000330:	4b98      	ldr	r3, [pc, #608]	@ (8000594 <LCD_Init+0x2c0>)
 8000332:	681a      	ldr	r2, [r3, #0]
 8000334:	4b97      	ldr	r3, [pc, #604]	@ (8000594 <LCD_Init+0x2c0>)
 8000336:	499d      	ldr	r1, [pc, #628]	@ (80005ac <LCD_Init+0x2d8>)
 8000338:	400a      	ands	r2, r1
 800033a:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 20U );
 800033c:	4b95      	ldr	r3, [pc, #596]	@ (8000594 <LCD_Init+0x2c0>)
 800033e:	681a      	ldr	r2, [r3, #0]
 8000340:	4b94      	ldr	r3, [pc, #592]	@ (8000594 <LCD_Init+0x2c0>)
 8000342:	2180      	movs	r1, #128	@ 0x80
 8000344:	0349      	lsls	r1, r1, #13
 8000346:	430a      	orrs	r2, r1
 8000348:	601a      	str	r2, [r3, #0]

	GPIOB->PUPDR  &= ~( 0x3UL << 22U );
 800034a:	4b92      	ldr	r3, [pc, #584]	@ (8000594 <LCD_Init+0x2c0>)
 800034c:	68da      	ldr	r2, [r3, #12]
 800034e:	4b91      	ldr	r3, [pc, #580]	@ (8000594 <LCD_Init+0x2c0>)
 8000350:	4997      	ldr	r1, [pc, #604]	@ (80005b0 <LCD_Init+0x2dc>)
 8000352:	400a      	ands	r2, r1
 8000354:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 11U );
 8000356:	4b8f      	ldr	r3, [pc, #572]	@ (8000594 <LCD_Init+0x2c0>)
 8000358:	685a      	ldr	r2, [r3, #4]
 800035a:	4b8e      	ldr	r3, [pc, #568]	@ (8000594 <LCD_Init+0x2c0>)
 800035c:	4995      	ldr	r1, [pc, #596]	@ (80005b4 <LCD_Init+0x2e0>)
 800035e:	400a      	ands	r2, r1
 8000360:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 22U );
 8000362:	4b8c      	ldr	r3, [pc, #560]	@ (8000594 <LCD_Init+0x2c0>)
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	4b8b      	ldr	r3, [pc, #556]	@ (8000594 <LCD_Init+0x2c0>)
 8000368:	4993      	ldr	r1, [pc, #588]	@ (80005b8 <LCD_Init+0x2e4>)
 800036a:	400a      	ands	r2, r1
 800036c:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 22U );
 800036e:	4b89      	ldr	r3, [pc, #548]	@ (8000594 <LCD_Init+0x2c0>)
 8000370:	681a      	ldr	r2, [r3, #0]
 8000372:	4b88      	ldr	r3, [pc, #544]	@ (8000594 <LCD_Init+0x2c0>)
 8000374:	2180      	movs	r1, #128	@ 0x80
 8000376:	03c9      	lsls	r1, r1, #15
 8000378:	430a      	orrs	r2, r1
 800037a:	601a      	str	r2, [r3, #0]

/**
  * Configuración de los pines de datos (D4-D7) como GP output PP
	*/
	GPIOB->PUPDR  &= ~( 0x3UL << 24U );
 800037c:	4b85      	ldr	r3, [pc, #532]	@ (8000594 <LCD_Init+0x2c0>)
 800037e:	68da      	ldr	r2, [r3, #12]
 8000380:	4b84      	ldr	r3, [pc, #528]	@ (8000594 <LCD_Init+0x2c0>)
 8000382:	498e      	ldr	r1, [pc, #568]	@ (80005bc <LCD_Init+0x2e8>)
 8000384:	400a      	ands	r2, r1
 8000386:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 12U );
 8000388:	4b82      	ldr	r3, [pc, #520]	@ (8000594 <LCD_Init+0x2c0>)
 800038a:	685a      	ldr	r2, [r3, #4]
 800038c:	4b81      	ldr	r3, [pc, #516]	@ (8000594 <LCD_Init+0x2c0>)
 800038e:	498c      	ldr	r1, [pc, #560]	@ (80005c0 <LCD_Init+0x2ec>)
 8000390:	400a      	ands	r2, r1
 8000392:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 24U );
 8000394:	4b7f      	ldr	r3, [pc, #508]	@ (8000594 <LCD_Init+0x2c0>)
 8000396:	681a      	ldr	r2, [r3, #0]
 8000398:	4b7e      	ldr	r3, [pc, #504]	@ (8000594 <LCD_Init+0x2c0>)
 800039a:	498a      	ldr	r1, [pc, #552]	@ (80005c4 <LCD_Init+0x2f0>)
 800039c:	400a      	ands	r2, r1
 800039e:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 24U );
 80003a0:	4b7c      	ldr	r3, [pc, #496]	@ (8000594 <LCD_Init+0x2c0>)
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	4b7b      	ldr	r3, [pc, #492]	@ (8000594 <LCD_Init+0x2c0>)
 80003a6:	2180      	movs	r1, #128	@ 0x80
 80003a8:	0449      	lsls	r1, r1, #17
 80003aa:	430a      	orrs	r2, r1
 80003ac:	601a      	str	r2, [r3, #0]

	GPIOB->PUPDR  &= ~( 0x3UL << 26U );
 80003ae:	4b79      	ldr	r3, [pc, #484]	@ (8000594 <LCD_Init+0x2c0>)
 80003b0:	68da      	ldr	r2, [r3, #12]
 80003b2:	4b78      	ldr	r3, [pc, #480]	@ (8000594 <LCD_Init+0x2c0>)
 80003b4:	4984      	ldr	r1, [pc, #528]	@ (80005c8 <LCD_Init+0x2f4>)
 80003b6:	400a      	ands	r2, r1
 80003b8:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 13U );
 80003ba:	4b76      	ldr	r3, [pc, #472]	@ (8000594 <LCD_Init+0x2c0>)
 80003bc:	685a      	ldr	r2, [r3, #4]
 80003be:	4b75      	ldr	r3, [pc, #468]	@ (8000594 <LCD_Init+0x2c0>)
 80003c0:	4982      	ldr	r1, [pc, #520]	@ (80005cc <LCD_Init+0x2f8>)
 80003c2:	400a      	ands	r2, r1
 80003c4:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 26U );
 80003c6:	4b73      	ldr	r3, [pc, #460]	@ (8000594 <LCD_Init+0x2c0>)
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	4b72      	ldr	r3, [pc, #456]	@ (8000594 <LCD_Init+0x2c0>)
 80003cc:	4980      	ldr	r1, [pc, #512]	@ (80005d0 <LCD_Init+0x2fc>)
 80003ce:	400a      	ands	r2, r1
 80003d0:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 26U );
 80003d2:	4b70      	ldr	r3, [pc, #448]	@ (8000594 <LCD_Init+0x2c0>)
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	4b6f      	ldr	r3, [pc, #444]	@ (8000594 <LCD_Init+0x2c0>)
 80003d8:	2180      	movs	r1, #128	@ 0x80
 80003da:	04c9      	lsls	r1, r1, #19
 80003dc:	430a      	orrs	r2, r1
 80003de:	601a      	str	r2, [r3, #0]

	GPIOB->PUPDR  &= ~( 0x3UL << 28U );
 80003e0:	4b6c      	ldr	r3, [pc, #432]	@ (8000594 <LCD_Init+0x2c0>)
 80003e2:	68da      	ldr	r2, [r3, #12]
 80003e4:	4b6b      	ldr	r3, [pc, #428]	@ (8000594 <LCD_Init+0x2c0>)
 80003e6:	497b      	ldr	r1, [pc, #492]	@ (80005d4 <LCD_Init+0x300>)
 80003e8:	400a      	ands	r2, r1
 80003ea:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 14U );
 80003ec:	4b69      	ldr	r3, [pc, #420]	@ (8000594 <LCD_Init+0x2c0>)
 80003ee:	685a      	ldr	r2, [r3, #4]
 80003f0:	4b68      	ldr	r3, [pc, #416]	@ (8000594 <LCD_Init+0x2c0>)
 80003f2:	4979      	ldr	r1, [pc, #484]	@ (80005d8 <LCD_Init+0x304>)
 80003f4:	400a      	ands	r2, r1
 80003f6:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 28U );
 80003f8:	4b66      	ldr	r3, [pc, #408]	@ (8000594 <LCD_Init+0x2c0>)
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	4b65      	ldr	r3, [pc, #404]	@ (8000594 <LCD_Init+0x2c0>)
 80003fe:	4977      	ldr	r1, [pc, #476]	@ (80005dc <LCD_Init+0x308>)
 8000400:	400a      	ands	r2, r1
 8000402:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 28U );
 8000404:	4b63      	ldr	r3, [pc, #396]	@ (8000594 <LCD_Init+0x2c0>)
 8000406:	681a      	ldr	r2, [r3, #0]
 8000408:	4b62      	ldr	r3, [pc, #392]	@ (8000594 <LCD_Init+0x2c0>)
 800040a:	2180      	movs	r1, #128	@ 0x80
 800040c:	0549      	lsls	r1, r1, #21
 800040e:	430a      	orrs	r2, r1
 8000410:	601a      	str	r2, [r3, #0]

	GPIOB->PUPDR  &= ~( 0x3UL << 30U );
 8000412:	4b60      	ldr	r3, [pc, #384]	@ (8000594 <LCD_Init+0x2c0>)
 8000414:	68da      	ldr	r2, [r3, #12]
 8000416:	4b5f      	ldr	r3, [pc, #380]	@ (8000594 <LCD_Init+0x2c0>)
 8000418:	0092      	lsls	r2, r2, #2
 800041a:	0892      	lsrs	r2, r2, #2
 800041c:	60da      	str	r2, [r3, #12]
	GPIOB->OTYPER &= ~( 0x1UL << 15U );
 800041e:	4b5d      	ldr	r3, [pc, #372]	@ (8000594 <LCD_Init+0x2c0>)
 8000420:	685a      	ldr	r2, [r3, #4]
 8000422:	4b5c      	ldr	r3, [pc, #368]	@ (8000594 <LCD_Init+0x2c0>)
 8000424:	496e      	ldr	r1, [pc, #440]	@ (80005e0 <LCD_Init+0x30c>)
 8000426:	400a      	ands	r2, r1
 8000428:	605a      	str	r2, [r3, #4]
	GPIOB->MODER  &= ~( 0x2UL << 30U );
 800042a:	4b5a      	ldr	r3, [pc, #360]	@ (8000594 <LCD_Init+0x2c0>)
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	4b59      	ldr	r3, [pc, #356]	@ (8000594 <LCD_Init+0x2c0>)
 8000430:	0052      	lsls	r2, r2, #1
 8000432:	0852      	lsrs	r2, r2, #1
 8000434:	601a      	str	r2, [r3, #0]
	GPIOB->MODER  |=  ( 0x1UL << 30U );
 8000436:	4b57      	ldr	r3, [pc, #348]	@ (8000594 <LCD_Init+0x2c0>)
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	4b56      	ldr	r3, [pc, #344]	@ (8000594 <LCD_Init+0x2c0>)
 800043c:	2180      	movs	r1, #128	@ 0x80
 800043e:	05c9      	lsls	r1, r1, #23
 8000440:	430a      	orrs	r2, r1
 8000442:	601a      	str	r2, [r3, #0]
/**
  * Inicialización del LCD
  * https://web.alfredstate.edu/faculty/weimandn/lcd/lcd_initialization/lcd_initialization_index.html
  * Power ON
  */
	GPIOB->BSRR	 =	 LCD_RS_PIN_LOW;
 8000444:	4b53      	ldr	r3, [pc, #332]	@ (8000594 <LCD_Init+0x2c0>)
 8000446:	2280      	movs	r2, #128	@ 0x80
 8000448:	0492      	lsls	r2, r2, #18
 800044a:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_RW_PIN_LOW;
 800044c:	4b51      	ldr	r3, [pc, #324]	@ (8000594 <LCD_Init+0x2c0>)
 800044e:	2280      	movs	r2, #128	@ 0x80
 8000450:	04d2      	lsls	r2, r2, #19
 8000452:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_EN_PIN_LOW;
 8000454:	4b4f      	ldr	r3, [pc, #316]	@ (8000594 <LCD_Init+0x2c0>)
 8000456:	2280      	movs	r2, #128	@ 0x80
 8000458:	0512      	lsls	r2, r2, #20
 800045a:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D4_PIN_LOW;
 800045c:	4b4d      	ldr	r3, [pc, #308]	@ (8000594 <LCD_Init+0x2c0>)
 800045e:	2280      	movs	r2, #128	@ 0x80
 8000460:	0552      	lsls	r2, r2, #21
 8000462:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D5_PIN_LOW;
 8000464:	4b4b      	ldr	r3, [pc, #300]	@ (8000594 <LCD_Init+0x2c0>)
 8000466:	2280      	movs	r2, #128	@ 0x80
 8000468:	0592      	lsls	r2, r2, #22
 800046a:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D6_PIN_LOW;
 800046c:	4b49      	ldr	r3, [pc, #292]	@ (8000594 <LCD_Init+0x2c0>)
 800046e:	2280      	movs	r2, #128	@ 0x80
 8000470:	05d2      	lsls	r2, r2, #23
 8000472:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D7_PIN_LOW;
 8000474:	4b47      	ldr	r3, [pc, #284]	@ (8000594 <LCD_Init+0x2c0>)
 8000476:	2280      	movs	r2, #128	@ 0x80
 8000478:	0612      	lsls	r2, r2, #24
 800047a:	619a      	str	r2, [r3, #24]
	SysTick_Delay( 50 );
 800047c:	2032      	movs	r0, #50	@ 0x32
 800047e:	f000 fbf7 	bl	8000c70 <SysTick_Delay>

	/* Special case of 'Function Set'	*/
	GPIOB->BSRR	 =	 LCD_D4_PIN_HIGH;
 8000482:	4b44      	ldr	r3, [pc, #272]	@ (8000594 <LCD_Init+0x2c0>)
 8000484:	2280      	movs	r2, #128	@ 0x80
 8000486:	0152      	lsls	r2, r2, #5
 8000488:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D5_PIN_HIGH;
 800048a:	4b42      	ldr	r3, [pc, #264]	@ (8000594 <LCD_Init+0x2c0>)
 800048c:	2280      	movs	r2, #128	@ 0x80
 800048e:	0192      	lsls	r2, r2, #6
 8000490:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D6_PIN_LOW;
 8000492:	4b40      	ldr	r3, [pc, #256]	@ (8000594 <LCD_Init+0x2c0>)
 8000494:	2280      	movs	r2, #128	@ 0x80
 8000496:	05d2      	lsls	r2, r2, #23
 8000498:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D7_PIN_LOW;
 800049a:	4b3e      	ldr	r3, [pc, #248]	@ (8000594 <LCD_Init+0x2c0>)
 800049c:	2280      	movs	r2, #128	@ 0x80
 800049e:	0612      	lsls	r2, r2, #24
 80004a0:	619a      	str	r2, [r3, #24]
	LCD_Pulse_EN( );
 80004a2:	f000 faa3 	bl	80009ec <LCD_Pulse_EN>
	SysTick_Delay( 50 );
 80004a6:	2032      	movs	r0, #50	@ 0x32
 80004a8:	f000 fbe2 	bl	8000c70 <SysTick_Delay>

	/* Special case of 'Function Set' */
	GPIOB->BSRR	 =	 LCD_D4_PIN_HIGH;
 80004ac:	4b39      	ldr	r3, [pc, #228]	@ (8000594 <LCD_Init+0x2c0>)
 80004ae:	2280      	movs	r2, #128	@ 0x80
 80004b0:	0152      	lsls	r2, r2, #5
 80004b2:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D5_PIN_HIGH;
 80004b4:	4b37      	ldr	r3, [pc, #220]	@ (8000594 <LCD_Init+0x2c0>)
 80004b6:	2280      	movs	r2, #128	@ 0x80
 80004b8:	0192      	lsls	r2, r2, #6
 80004ba:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D6_PIN_LOW;
 80004bc:	4b35      	ldr	r3, [pc, #212]	@ (8000594 <LCD_Init+0x2c0>)
 80004be:	2280      	movs	r2, #128	@ 0x80
 80004c0:	05d2      	lsls	r2, r2, #23
 80004c2:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D7_PIN_LOW;
 80004c4:	4b33      	ldr	r3, [pc, #204]	@ (8000594 <LCD_Init+0x2c0>)
 80004c6:	2280      	movs	r2, #128	@ 0x80
 80004c8:	0612      	lsls	r2, r2, #24
 80004ca:	619a      	str	r2, [r3, #24]
	LCD_Pulse_EN( );
 80004cc:	f000 fa8e 	bl	80009ec <LCD_Pulse_EN>
	SysTick_Delay( 50 );
 80004d0:	2032      	movs	r0, #50	@ 0x32
 80004d2:	f000 fbcd 	bl	8000c70 <SysTick_Delay>

	/* Special case of 'Function Set' */
	GPIOB->BSRR	 =	 LCD_D4_PIN_HIGH;
 80004d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000594 <LCD_Init+0x2c0>)
 80004d8:	2280      	movs	r2, #128	@ 0x80
 80004da:	0152      	lsls	r2, r2, #5
 80004dc:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D5_PIN_HIGH;
 80004de:	4b2d      	ldr	r3, [pc, #180]	@ (8000594 <LCD_Init+0x2c0>)
 80004e0:	2280      	movs	r2, #128	@ 0x80
 80004e2:	0192      	lsls	r2, r2, #6
 80004e4:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D6_PIN_LOW;
 80004e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000594 <LCD_Init+0x2c0>)
 80004e8:	2280      	movs	r2, #128	@ 0x80
 80004ea:	05d2      	lsls	r2, r2, #23
 80004ec:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D7_PIN_LOW;
 80004ee:	4b29      	ldr	r3, [pc, #164]	@ (8000594 <LCD_Init+0x2c0>)
 80004f0:	2280      	movs	r2, #128	@ 0x80
 80004f2:	0612      	lsls	r2, r2, #24
 80004f4:	619a      	str	r2, [r3, #24]
	LCD_Pulse_EN( );
 80004f6:	f000 fa79 	bl	80009ec <LCD_Pulse_EN>
	while( LCD_Busy( ) );
 80004fa:	46c0      	nop			@ (mov r8, r8)
 80004fc:	f000 fa06 	bl	800090c <LCD_Busy>
 8000500:	1e03      	subs	r3, r0, #0
 8000502:	d1fb      	bne.n	80004fc <LCD_Init+0x228>

	/* Initial 'Function Set' to change 4-bit mode	*/
	GPIOB->BSRR	 =	 LCD_D4_PIN_LOW;
 8000504:	4b23      	ldr	r3, [pc, #140]	@ (8000594 <LCD_Init+0x2c0>)
 8000506:	2280      	movs	r2, #128	@ 0x80
 8000508:	0552      	lsls	r2, r2, #21
 800050a:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D5_PIN_HIGH;
 800050c:	4b21      	ldr	r3, [pc, #132]	@ (8000594 <LCD_Init+0x2c0>)
 800050e:	2280      	movs	r2, #128	@ 0x80
 8000510:	0192      	lsls	r2, r2, #6
 8000512:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D6_PIN_LOW;
 8000514:	4b1f      	ldr	r3, [pc, #124]	@ (8000594 <LCD_Init+0x2c0>)
 8000516:	2280      	movs	r2, #128	@ 0x80
 8000518:	05d2      	lsls	r2, r2, #23
 800051a:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	 =	 LCD_D7_PIN_LOW;
 800051c:	4b1d      	ldr	r3, [pc, #116]	@ (8000594 <LCD_Init+0x2c0>)
 800051e:	2280      	movs	r2, #128	@ 0x80
 8000520:	0612      	lsls	r2, r2, #24
 8000522:	619a      	str	r2, [r3, #24]
	LCD_Pulse_EN( );
 8000524:	f000 fa62 	bl	80009ec <LCD_Pulse_EN>
	while( LCD_Busy( ) );
 8000528:	46c0      	nop			@ (mov r8, r8)
 800052a:	f000 f9ef 	bl	800090c <LCD_Busy>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d1fb      	bne.n	800052a <LCD_Init+0x256>
	/* 'Function Set' (I=1, N and F as required)	*/
	LCD_Write_Cmd( 0x28U );
 8000532:	2028      	movs	r0, #40	@ 0x28
 8000534:	f000 f8c0 	bl	80006b8 <LCD_Write_Cmd>
	/* 'Display ON/OFF Control' (D=0, C=0, B=0)	*/
	LCD_Write_Cmd( 0x08U );
 8000538:	2008      	movs	r0, #8
 800053a:	f000 f8bd 	bl	80006b8 <LCD_Write_Cmd>
	/* 'Clear Display'	*/
	LCD_Write_Cmd( 0x01U );//
 800053e:	2001      	movs	r0, #1
 8000540:	f000 f8ba 	bl	80006b8 <LCD_Write_Cmd>
	/* 'Entry Mode Set' (I/D and S as required)	*/
	LCD_Write_Cmd( 0x06U );
 8000544:	2006      	movs	r0, #6
 8000546:	f000 f8b7 	bl	80006b8 <LCD_Write_Cmd>
	/* Initialization Ends	*/
	LCD_Write_Cmd( 0x0FU );
 800054a:	200f      	movs	r0, #15
 800054c:	f000 f8b4 	bl	80006b8 <LCD_Write_Cmd>

	//Cargamos el caracter definido por el usuario en la CGRAM
	LCD_Write_Cmd( 0x40 );
 8000550:	2040      	movs	r0, #64	@ 0x40
 8000552:	f000 f8b1 	bl	80006b8 <LCD_Write_Cmd>
	p = &UserFont[0][0];
 8000556:	4b23      	ldr	r3, [pc, #140]	@ (80005e4 <LCD_Init+0x310>)
 8000558:	607b      	str	r3, [r7, #4]

	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 800055a:	2300      	movs	r3, #0
 800055c:	603b      	str	r3, [r7, #0]
 800055e:	e00c      	b.n	800057a <LCD_Init+0x2a6>
		LCD_Put_Char( *p );
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	b25b      	sxtb	r3, r3
 8000566:	b2db      	uxtb	r3, r3
 8000568:	0018      	movs	r0, r3
 800056a:	f000 f8bb 	bl	80006e4 <LCD_Put_Char>
	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	3301      	adds	r3, #1
 8000572:	603b      	str	r3, [r7, #0]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	3301      	adds	r3, #1
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	2b3f      	cmp	r3, #63	@ 0x3f
 800057e:	d9ef      	bls.n	8000560 <LCD_Init+0x28c>

	/*	Set DDRAM address in address			*/
	LCD_Write_Cmd( 0x80 );//
 8000580:	2080      	movs	r0, #128	@ 0x80
 8000582:	f000 f899 	bl	80006b8 <LCD_Write_Cmd>
}
 8000586:	46c0      	nop			@ (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	b002      	add	sp, #8
 800058c:	bd80      	pop	{r7, pc}
 800058e:	46c0      	nop			@ (mov r8, r8)
 8000590:	40021000 	.word	0x40021000
 8000594:	50000400 	.word	0x50000400
 8000598:	fff3ffff 	.word	0xfff3ffff
 800059c:	fffffdff 	.word	0xfffffdff
 80005a0:	fff7ffff 	.word	0xfff7ffff
 80005a4:	ffcfffff 	.word	0xffcfffff
 80005a8:	fffffbff 	.word	0xfffffbff
 80005ac:	ffdfffff 	.word	0xffdfffff
 80005b0:	ff3fffff 	.word	0xff3fffff
 80005b4:	fffff7ff 	.word	0xfffff7ff
 80005b8:	ff7fffff 	.word	0xff7fffff
 80005bc:	fcffffff 	.word	0xfcffffff
 80005c0:	ffffefff 	.word	0xffffefff
 80005c4:	fdffffff 	.word	0xfdffffff
 80005c8:	f3ffffff 	.word	0xf3ffffff
 80005cc:	ffffdfff 	.word	0xffffdfff
 80005d0:	f7ffffff 	.word	0xf7ffffff
 80005d4:	cfffffff 	.word	0xcfffffff
 80005d8:	ffffbfff 	.word	0xffffbfff
 80005dc:	dfffffff 	.word	0xdfffffff
 80005e0:	ffff7fff 	.word	0xffff7fff
 80005e4:	08000d90 	.word	0x08000d90

080005e8 <LCD_Out_Data4>:

//Funcion que genera un strobe en el LCD
void LCD_Out_Data4(uint8_t val){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	0002      	movs	r2, r0
 80005f0:	1dfb      	adds	r3, r7, #7
 80005f2:	701a      	strb	r2, [r3, #0]
	if( ( val & 0x01U ) == 0x01U )
 80005f4:	1dfb      	adds	r3, r7, #7
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2201      	movs	r2, #1
 80005fa:	4013      	ands	r3, r2
 80005fc:	d004      	beq.n	8000608 <LCD_Out_Data4+0x20>
		GPIOB->BSRR	=	LCD_D4_PIN_HIGH;
 80005fe:	4b1b      	ldr	r3, [pc, #108]	@ (800066c <LCD_Out_Data4+0x84>)
 8000600:	2280      	movs	r2, #128	@ 0x80
 8000602:	0152      	lsls	r2, r2, #5
 8000604:	619a      	str	r2, [r3, #24]
 8000606:	e003      	b.n	8000610 <LCD_Out_Data4+0x28>
	else
		GPIOB->BSRR	=	LCD_D4_PIN_LOW;
 8000608:	4b18      	ldr	r3, [pc, #96]	@ (800066c <LCD_Out_Data4+0x84>)
 800060a:	2280      	movs	r2, #128	@ 0x80
 800060c:	0552      	lsls	r2, r2, #21
 800060e:	619a      	str	r2, [r3, #24]

	if( ( val & 0x02U ) == 0x02U )
 8000610:	1dfb      	adds	r3, r7, #7
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2202      	movs	r2, #2
 8000616:	4013      	ands	r3, r2
 8000618:	d004      	beq.n	8000624 <LCD_Out_Data4+0x3c>
		GPIOB->BSRR	=	LCD_D5_PIN_HIGH;
 800061a:	4b14      	ldr	r3, [pc, #80]	@ (800066c <LCD_Out_Data4+0x84>)
 800061c:	2280      	movs	r2, #128	@ 0x80
 800061e:	0192      	lsls	r2, r2, #6
 8000620:	619a      	str	r2, [r3, #24]
 8000622:	e003      	b.n	800062c <LCD_Out_Data4+0x44>
	else
		GPIOB->BSRR	=	LCD_D5_PIN_LOW;
 8000624:	4b11      	ldr	r3, [pc, #68]	@ (800066c <LCD_Out_Data4+0x84>)
 8000626:	2280      	movs	r2, #128	@ 0x80
 8000628:	0592      	lsls	r2, r2, #22
 800062a:	619a      	str	r2, [r3, #24]

	if( ( val & 0x04U ) == 0x04U )
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2204      	movs	r2, #4
 8000632:	4013      	ands	r3, r2
 8000634:	d004      	beq.n	8000640 <LCD_Out_Data4+0x58>
		GPIOB->BSRR	=	LCD_D6_PIN_HIGH;
 8000636:	4b0d      	ldr	r3, [pc, #52]	@ (800066c <LCD_Out_Data4+0x84>)
 8000638:	2280      	movs	r2, #128	@ 0x80
 800063a:	01d2      	lsls	r2, r2, #7
 800063c:	619a      	str	r2, [r3, #24]
 800063e:	e003      	b.n	8000648 <LCD_Out_Data4+0x60>
	else
		GPIOB->BSRR	=	LCD_D6_PIN_LOW;
 8000640:	4b0a      	ldr	r3, [pc, #40]	@ (800066c <LCD_Out_Data4+0x84>)
 8000642:	2280      	movs	r2, #128	@ 0x80
 8000644:	05d2      	lsls	r2, r2, #23
 8000646:	619a      	str	r2, [r3, #24]

	if( ( val & 0x08U ) == 0x08U )
 8000648:	1dfb      	adds	r3, r7, #7
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2208      	movs	r2, #8
 800064e:	4013      	ands	r3, r2
 8000650:	d004      	beq.n	800065c <LCD_Out_Data4+0x74>
		GPIOB->BSRR	=	LCD_D7_PIN_HIGH;
 8000652:	4b06      	ldr	r3, [pc, #24]	@ (800066c <LCD_Out_Data4+0x84>)
 8000654:	2280      	movs	r2, #128	@ 0x80
 8000656:	0212      	lsls	r2, r2, #8
 8000658:	619a      	str	r2, [r3, #24]
	else
		GPIOB->BSRR	=	LCD_D7_PIN_LOW;
}
 800065a:	e003      	b.n	8000664 <LCD_Out_Data4+0x7c>
		GPIOB->BSRR	=	LCD_D7_PIN_LOW;
 800065c:	4b03      	ldr	r3, [pc, #12]	@ (800066c <LCD_Out_Data4+0x84>)
 800065e:	2280      	movs	r2, #128	@ 0x80
 8000660:	0612      	lsls	r2, r2, #24
 8000662:	619a      	str	r2, [r3, #24]
}
 8000664:	46c0      	nop			@ (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	b002      	add	sp, #8
 800066a:	bd80      	pop	{r7, pc}
 800066c:	50000400 	.word	0x50000400

08000670 <LCD_Write_Byte>:

//Funcion que escribe 1 byte de datos en el LCD
void LCD_Write_Byte(uint8_t val){
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	0002      	movs	r2, r0
 8000678:	1dfb      	adds	r3, r7, #7
 800067a:	701a      	strb	r2, [r3, #0]
	LCD_Out_Data4( ( val >> 4 ) & 0x0FU );
 800067c:	1dfb      	adds	r3, r7, #7
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	091b      	lsrs	r3, r3, #4
 8000682:	b2db      	uxtb	r3, r3
 8000684:	0018      	movs	r0, r3
 8000686:	f7ff ffaf 	bl	80005e8 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 800068a:	f000 f9af 	bl	80009ec <LCD_Pulse_EN>
	LCD_Out_Data4( val & 0x0FU );
 800068e:	1dfb      	adds	r3, r7, #7
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	220f      	movs	r2, #15
 8000694:	4013      	ands	r3, r2
 8000696:	b2db      	uxtb	r3, r3
 8000698:	0018      	movs	r0, r3
 800069a:	f7ff ffa5 	bl	80005e8 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 800069e:	f000 f9a5 	bl	80009ec <LCD_Pulse_EN>
	while( LCD_Busy( ) );
 80006a2:	46c0      	nop			@ (mov r8, r8)
 80006a4:	f000 f932 	bl	800090c <LCD_Busy>
 80006a8:	1e03      	subs	r3, r0, #0
 80006aa:	d1fb      	bne.n	80006a4 <LCD_Write_Byte+0x34>
}
 80006ac:	46c0      	nop			@ (mov r8, r8)
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b002      	add	sp, #8
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <LCD_Write_Cmd>:

//Funcion que escribe un comando en el LCD
void LCD_Write_Cmd(uint8_t val){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	0002      	movs	r2, r0
 80006c0:	1dfb      	adds	r3, r7, #7
 80006c2:	701a      	strb	r2, [r3, #0]
	GPIOB->BSRR	=	LCD_RS_PIN_LOW;
 80006c4:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <LCD_Write_Cmd+0x28>)
 80006c6:	2280      	movs	r2, #128	@ 0x80
 80006c8:	0492      	lsls	r2, r2, #18
 80006ca:	619a      	str	r2, [r3, #24]
	LCD_Write_Byte( val );
 80006cc:	1dfb      	adds	r3, r7, #7
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	0018      	movs	r0, r3
 80006d2:	f7ff ffcd 	bl	8000670 <LCD_Write_Byte>
}
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b002      	add	sp, #8
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	46c0      	nop			@ (mov r8, r8)
 80006e0:	50000400 	.word	0x50000400

080006e4 <LCD_Put_Char>:

//Escribe un caracter ASCII en el LCD
void LCD_Put_Char(uint8_t c){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	0002      	movs	r2, r0
 80006ec:	1dfb      	adds	r3, r7, #7
 80006ee:	701a      	strb	r2, [r3, #0]
	GPIOB->BSRR	=	LCD_RS_PIN_HIGH;
 80006f0:	4b06      	ldr	r3, [pc, #24]	@ (800070c <LCD_Put_Char+0x28>)
 80006f2:	2280      	movs	r2, #128	@ 0x80
 80006f4:	0092      	lsls	r2, r2, #2
 80006f6:	619a      	str	r2, [r3, #24]
	LCD_Write_Byte( c );
 80006f8:	1dfb      	adds	r3, r7, #7
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	0018      	movs	r0, r3
 80006fe:	f7ff ffb7 	bl	8000670 <LCD_Write_Byte>
}
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	b002      	add	sp, #8
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			@ (mov r8, r8)
 800070c:	50000400 	.word	0x50000400

08000710 <LCD_Set_Cursor>:

//Funcion que establece el cursor en una posicion de la pantalla del LCD
//Minimum values for line and column must be 1
void LCD_Set_Cursor(uint8_t line, uint8_t column){
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	0002      	movs	r2, r0
 8000718:	1dfb      	adds	r3, r7, #7
 800071a:	701a      	strb	r2, [r3, #0]
 800071c:	1dbb      	adds	r3, r7, #6
 800071e:	1c0a      	adds	r2, r1, #0
 8000720:	701a      	strb	r2, [r3, #0]
	uint8_t address;
	column--;
 8000722:	1dbb      	adds	r3, r7, #6
 8000724:	781a      	ldrb	r2, [r3, #0]
 8000726:	1dbb      	adds	r3, r7, #6
 8000728:	3a01      	subs	r2, #1
 800072a:	701a      	strb	r2, [r3, #0]
	line--;
 800072c:	1dfb      	adds	r3, r7, #7
 800072e:	781a      	ldrb	r2, [r3, #0]
 8000730:	1dfb      	adds	r3, r7, #7
 8000732:	3a01      	subs	r2, #1
 8000734:	701a      	strb	r2, [r3, #0]
	address = ( line * 0x40U ) + column;
 8000736:	1dfb      	adds	r3, r7, #7
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	019b      	lsls	r3, r3, #6
 800073c:	b2d9      	uxtb	r1, r3
 800073e:	200f      	movs	r0, #15
 8000740:	183b      	adds	r3, r7, r0
 8000742:	1dba      	adds	r2, r7, #6
 8000744:	7812      	ldrb	r2, [r2, #0]
 8000746:	188a      	adds	r2, r1, r2
 8000748:	701a      	strb	r2, [r3, #0]
	address = 0x80U + ( address & 0x7FU );
 800074a:	0001      	movs	r1, r0
 800074c:	187b      	adds	r3, r7, r1
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	227f      	movs	r2, #127	@ 0x7f
 8000752:	4013      	ands	r3, r2
 8000754:	b2da      	uxtb	r2, r3
 8000756:	187b      	adds	r3, r7, r1
 8000758:	3a80      	subs	r2, #128	@ 0x80
 800075a:	701a      	strb	r2, [r3, #0]
	LCD_Write_Cmd( address );
 800075c:	187b      	adds	r3, r7, r1
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	0018      	movs	r0, r3
 8000762:	f7ff ffa9 	bl	80006b8 <LCD_Write_Cmd>
}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b004      	add	sp, #16
 800076c:	bd80      	pop	{r7, pc}

0800076e <LCD_Put_Str>:

//Funcion que envia una cadena de caracteres ASCII al LCD
void LCD_Put_Str(char * str){
 800076e:	b590      	push	{r4, r7, lr}
 8000770:	b085      	sub	sp, #20
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
	for( int16_t i = 0; i < 16 && str[ i ] != 0; i++ )
 8000776:	230e      	movs	r3, #14
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	2200      	movs	r2, #0
 800077c:	801a      	strh	r2, [r3, #0]
 800077e:	e012      	b.n	80007a6 <LCD_Put_Str+0x38>
		LCD_Put_Char( str[ i ] );
 8000780:	240e      	movs	r4, #14
 8000782:	193b      	adds	r3, r7, r4
 8000784:	2200      	movs	r2, #0
 8000786:	5e9b      	ldrsh	r3, [r3, r2]
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	18d3      	adds	r3, r2, r3
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	0018      	movs	r0, r3
 8000790:	f7ff ffa8 	bl	80006e4 <LCD_Put_Char>
	for( int16_t i = 0; i < 16 && str[ i ] != 0; i++ )
 8000794:	0021      	movs	r1, r4
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2200      	movs	r2, #0
 800079a:	5e9b      	ldrsh	r3, [r3, r2]
 800079c:	b29b      	uxth	r3, r3
 800079e:	3301      	adds	r3, #1
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	801a      	strh	r2, [r3, #0]
 80007a6:	220e      	movs	r2, #14
 80007a8:	18bb      	adds	r3, r7, r2
 80007aa:	2100      	movs	r1, #0
 80007ac:	5e5b      	ldrsh	r3, [r3, r1]
 80007ae:	2b0f      	cmp	r3, #15
 80007b0:	dc07      	bgt.n	80007c2 <LCD_Put_Str+0x54>
 80007b2:	18bb      	adds	r3, r7, r2
 80007b4:	2200      	movs	r2, #0
 80007b6:	5e9b      	ldrsh	r3, [r3, r2]
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	18d3      	adds	r3, r2, r3
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d1de      	bne.n	8000780 <LCD_Put_Str+0x12>
}
 80007c2:	46c0      	nop			@ (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b005      	add	sp, #20
 80007c8:	bd90      	pop	{r4, r7, pc}

080007ca <LCD_Put_Num>:

//Funcion que envia un caracter numerico al LCD
//El número debe ser entero y de 5 dígitos máximo
void LCD_Put_Num(int16_t num){
 80007ca:	b590      	push	{r4, r7, lr}
 80007cc:	b087      	sub	sp, #28
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	0002      	movs	r2, r0
 80007d2:	1dbb      	adds	r3, r7, #6
 80007d4:	801a      	strh	r2, [r3, #0]
	int16_t p;
	int16_t f = 0;
 80007d6:	2314      	movs	r3, #20
 80007d8:	18fb      	adds	r3, r7, r3
 80007da:	2200      	movs	r2, #0
 80007dc:	801a      	strh	r2, [r3, #0]
	int8_t ch[ 5 ];

	for( int16_t i = 0; i < 5; i++ ){
 80007de:	2312      	movs	r3, #18
 80007e0:	18fb      	adds	r3, r7, r3
 80007e2:	2200      	movs	r2, #0
 80007e4:	801a      	strh	r2, [r3, #0]
 80007e6:	e085      	b.n	80008f4 <LCD_Put_Num+0x12a>
		p = 1;
 80007e8:	2316      	movs	r3, #22
 80007ea:	18fb      	adds	r3, r7, r3
 80007ec:	2201      	movs	r2, #1
 80007ee:	801a      	strh	r2, [r3, #0]
		for( int16_t j = 4 - i; j > 0; j-- )
 80007f0:	2312      	movs	r3, #18
 80007f2:	18fb      	adds	r3, r7, r3
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	2204      	movs	r2, #4
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	2310      	movs	r3, #16
 80007fe:	18fb      	adds	r3, r7, r3
 8000800:	801a      	strh	r2, [r3, #0]
 8000802:	e012      	b.n	800082a <LCD_Put_Num+0x60>
			p = p * 10;
 8000804:	2116      	movs	r1, #22
 8000806:	187b      	adds	r3, r7, r1
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	1c1a      	adds	r2, r3, #0
 800080c:	0092      	lsls	r2, r2, #2
 800080e:	18d3      	adds	r3, r2, r3
 8000810:	18db      	adds	r3, r3, r3
 8000812:	b29a      	uxth	r2, r3
 8000814:	187b      	adds	r3, r7, r1
 8000816:	801a      	strh	r2, [r3, #0]
		for( int16_t j = 4 - i; j > 0; j-- )
 8000818:	2110      	movs	r1, #16
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2200      	movs	r2, #0
 800081e:	5e9b      	ldrsh	r3, [r3, r2]
 8000820:	b29b      	uxth	r3, r3
 8000822:	3b01      	subs	r3, #1
 8000824:	b29a      	uxth	r2, r3
 8000826:	187b      	adds	r3, r7, r1
 8000828:	801a      	strh	r2, [r3, #0]
 800082a:	2310      	movs	r3, #16
 800082c:	18fb      	adds	r3, r7, r3
 800082e:	2200      	movs	r2, #0
 8000830:	5e9b      	ldrsh	r3, [r3, r2]
 8000832:	2b00      	cmp	r3, #0
 8000834:	dce6      	bgt.n	8000804 <LCD_Put_Num+0x3a>
		ch[ i ] = ( num / p );
 8000836:	1dbb      	adds	r3, r7, #6
 8000838:	2200      	movs	r2, #0
 800083a:	5e9a      	ldrsh	r2, [r3, r2]
 800083c:	2416      	movs	r4, #22
 800083e:	193b      	adds	r3, r7, r4
 8000840:	2100      	movs	r1, #0
 8000842:	5e5b      	ldrsh	r3, [r3, r1]
 8000844:	0019      	movs	r1, r3
 8000846:	0010      	movs	r0, r2
 8000848:	f7ff fc58 	bl	80000fc <__divsi3>
 800084c:	0003      	movs	r3, r0
 800084e:	001a      	movs	r2, r3
 8000850:	2312      	movs	r3, #18
 8000852:	18fb      	adds	r3, r7, r3
 8000854:	2100      	movs	r1, #0
 8000856:	5e5b      	ldrsh	r3, [r3, r1]
 8000858:	b251      	sxtb	r1, r2
 800085a:	2208      	movs	r2, #8
 800085c:	18ba      	adds	r2, r7, r2
 800085e:	54d1      	strb	r1, [r2, r3]
		if( num >= p && !f )
 8000860:	1dba      	adds	r2, r7, #6
 8000862:	193b      	adds	r3, r7, r4
 8000864:	2100      	movs	r1, #0
 8000866:	5e52      	ldrsh	r2, [r2, r1]
 8000868:	2100      	movs	r1, #0
 800086a:	5e5b      	ldrsh	r3, [r3, r1]
 800086c:	429a      	cmp	r2, r3
 800086e:	db08      	blt.n	8000882 <LCD_Put_Num+0xb8>
 8000870:	2214      	movs	r2, #20
 8000872:	18bb      	adds	r3, r7, r2
 8000874:	2100      	movs	r1, #0
 8000876:	5e5b      	ldrsh	r3, [r3, r1]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d102      	bne.n	8000882 <LCD_Put_Num+0xb8>
			f = 1;
 800087c:	18bb      	adds	r3, r7, r2
 800087e:	2201      	movs	r2, #1
 8000880:	801a      	strh	r2, [r3, #0]
		num = num - ch[ i ] * p;
 8000882:	1dbb      	adds	r3, r7, #6
 8000884:	881a      	ldrh	r2, [r3, #0]
 8000886:	2012      	movs	r0, #18
 8000888:	183b      	adds	r3, r7, r0
 800088a:	2100      	movs	r1, #0
 800088c:	5e5b      	ldrsh	r3, [r3, r1]
 800088e:	2408      	movs	r4, #8
 8000890:	1939      	adds	r1, r7, r4
 8000892:	56cb      	ldrsb	r3, [r1, r3]
 8000894:	b29b      	uxth	r3, r3
 8000896:	2116      	movs	r1, #22
 8000898:	1879      	adds	r1, r7, r1
 800089a:	8809      	ldrh	r1, [r1, #0]
 800089c:	434b      	muls	r3, r1
 800089e:	b29b      	uxth	r3, r3
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	1dbb      	adds	r3, r7, #6
 80008a6:	801a      	strh	r2, [r3, #0]
		ch[ i ] = ch[ i ] + 48;
 80008a8:	183b      	adds	r3, r7, r0
 80008aa:	2200      	movs	r2, #0
 80008ac:	5e9b      	ldrsh	r3, [r3, r2]
 80008ae:	193a      	adds	r2, r7, r4
 80008b0:	56d3      	ldrsb	r3, [r2, r3]
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	3330      	adds	r3, #48	@ 0x30
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	183b      	adds	r3, r7, r0
 80008ba:	2100      	movs	r1, #0
 80008bc:	5e5b      	ldrsh	r3, [r3, r1]
 80008be:	b251      	sxtb	r1, r2
 80008c0:	193a      	adds	r2, r7, r4
 80008c2:	54d1      	strb	r1, [r2, r3]
		if( f )
 80008c4:	2314      	movs	r3, #20
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	2200      	movs	r2, #0
 80008ca:	5e9b      	ldrsh	r3, [r3, r2]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d008      	beq.n	80008e2 <LCD_Put_Num+0x118>
			LCD_Put_Char( ch[ i ] );
 80008d0:	183b      	adds	r3, r7, r0
 80008d2:	2200      	movs	r2, #0
 80008d4:	5e9b      	ldrsh	r3, [r3, r2]
 80008d6:	193a      	adds	r2, r7, r4
 80008d8:	56d3      	ldrsb	r3, [r2, r3]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	0018      	movs	r0, r3
 80008de:	f7ff ff01 	bl	80006e4 <LCD_Put_Char>
	for( int16_t i = 0; i < 5; i++ ){
 80008e2:	2112      	movs	r1, #18
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2200      	movs	r2, #0
 80008e8:	5e9b      	ldrsh	r3, [r3, r2]
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	3301      	adds	r3, #1
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	801a      	strh	r2, [r3, #0]
 80008f4:	2312      	movs	r3, #18
 80008f6:	18fb      	adds	r3, r7, r3
 80008f8:	2200      	movs	r2, #0
 80008fa:	5e9b      	ldrsh	r3, [r3, r2]
 80008fc:	2b04      	cmp	r3, #4
 80008fe:	dc00      	bgt.n	8000902 <LCD_Put_Num+0x138>
 8000900:	e772      	b.n	80007e8 <LCD_Put_Num+0x1e>
	}
}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	46c0      	nop			@ (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	b007      	add	sp, #28
 800090a:	bd90      	pop	{r4, r7, pc}

0800090c <LCD_Busy>:

//Funcion que provoca tiempos de espera en el LCD
char LCD_Busy(void){
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
/**
  * Configuracion de D7 as input floating
  */
	GPIOB->PUPDR &= ~( 0x3UL << 30U );
 8000910:	4b34      	ldr	r3, [pc, #208]	@ (80009e4 <LCD_Busy+0xd8>)
 8000912:	68da      	ldr	r2, [r3, #12]
 8000914:	4b33      	ldr	r3, [pc, #204]	@ (80009e4 <LCD_Busy+0xd8>)
 8000916:	0092      	lsls	r2, r2, #2
 8000918:	0892      	lsrs	r2, r2, #2
 800091a:	60da      	str	r2, [r3, #12]
  GPIOB->MODER &= ~( 0x3UL << 30U );
 800091c:	4b31      	ldr	r3, [pc, #196]	@ (80009e4 <LCD_Busy+0xd8>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b30      	ldr	r3, [pc, #192]	@ (80009e4 <LCD_Busy+0xd8>)
 8000922:	0092      	lsls	r2, r2, #2
 8000924:	0892      	lsrs	r2, r2, #2
 8000926:	601a      	str	r2, [r3, #0]
	GPIOB->BSRR	  =	 LCD_RS_PIN_LOW;
 8000928:	4b2e      	ldr	r3, [pc, #184]	@ (80009e4 <LCD_Busy+0xd8>)
 800092a:	2280      	movs	r2, #128	@ 0x80
 800092c:	0492      	lsls	r2, r2, #18
 800092e:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	  =	 LCD_RW_PIN_HIGH;
 8000930:	4b2c      	ldr	r3, [pc, #176]	@ (80009e4 <LCD_Busy+0xd8>)
 8000932:	2280      	movs	r2, #128	@ 0x80
 8000934:	00d2      	lsls	r2, r2, #3
 8000936:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR	  =	 LCD_EN_PIN_HIGH;
 8000938:	4b2a      	ldr	r3, [pc, #168]	@ (80009e4 <LCD_Busy+0xd8>)
 800093a:	2280      	movs	r2, #128	@ 0x80
 800093c:	0112      	lsls	r2, r2, #4
 800093e:	619a      	str	r2, [r3, #24]
	SysTick_Delay( 1 );
 8000940:	2001      	movs	r0, #1
 8000942:	f000 f995 	bl	8000c70 <SysTick_Delay>
	if(( GPIOB->IDR	& LCD_D7_PIN_HIGH )) {
 8000946:	4b27      	ldr	r3, [pc, #156]	@ (80009e4 <LCD_Busy+0xd8>)
 8000948:	691a      	ldr	r2, [r3, #16]
 800094a:	2380      	movs	r3, #128	@ 0x80
 800094c:	021b      	lsls	r3, r3, #8
 800094e:	4013      	ands	r3, r2
 8000950:	d022      	beq.n	8000998 <LCD_Busy+0x8c>
		GPIOB->BSRR	=  LCD_EN_PIN_LOW;
 8000952:	4b24      	ldr	r3, [pc, #144]	@ (80009e4 <LCD_Busy+0xd8>)
 8000954:	2280      	movs	r2, #128	@ 0x80
 8000956:	0512      	lsls	r2, r2, #20
 8000958:	619a      	str	r2, [r3, #24]
		GPIOB->BSRR	=	 LCD_RW_PIN_LOW;
 800095a:	4b22      	ldr	r3, [pc, #136]	@ (80009e4 <LCD_Busy+0xd8>)
 800095c:	2280      	movs	r2, #128	@ 0x80
 800095e:	04d2      	lsls	r2, r2, #19
 8000960:	619a      	str	r2, [r3, #24]
/**
  * Configuracion de D7 as output push-pull
  */
		GPIOB->PUPDR  &= ~( 0x3UL << 30U );
 8000962:	4b20      	ldr	r3, [pc, #128]	@ (80009e4 <LCD_Busy+0xd8>)
 8000964:	68da      	ldr	r2, [r3, #12]
 8000966:	4b1f      	ldr	r3, [pc, #124]	@ (80009e4 <LCD_Busy+0xd8>)
 8000968:	0092      	lsls	r2, r2, #2
 800096a:	0892      	lsrs	r2, r2, #2
 800096c:	60da      	str	r2, [r3, #12]
  	GPIOB->OTYPER &= ~( 0x1UL << 15U );
 800096e:	4b1d      	ldr	r3, [pc, #116]	@ (80009e4 <LCD_Busy+0xd8>)
 8000970:	685a      	ldr	r2, [r3, #4]
 8000972:	4b1c      	ldr	r3, [pc, #112]	@ (80009e4 <LCD_Busy+0xd8>)
 8000974:	491c      	ldr	r1, [pc, #112]	@ (80009e8 <LCD_Busy+0xdc>)
 8000976:	400a      	ands	r2, r1
 8000978:	605a      	str	r2, [r3, #4]
  	GPIOB->MODER  &= ~( 0x2UL << 30U );
 800097a:	4b1a      	ldr	r3, [pc, #104]	@ (80009e4 <LCD_Busy+0xd8>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	4b19      	ldr	r3, [pc, #100]	@ (80009e4 <LCD_Busy+0xd8>)
 8000980:	0052      	lsls	r2, r2, #1
 8000982:	0852      	lsrs	r2, r2, #1
 8000984:	601a      	str	r2, [r3, #0]
  	GPIOB->MODER  |=  ( 0x1UL << 30U );
 8000986:	4b17      	ldr	r3, [pc, #92]	@ (80009e4 <LCD_Busy+0xd8>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	4b16      	ldr	r3, [pc, #88]	@ (80009e4 <LCD_Busy+0xd8>)
 800098c:	2180      	movs	r1, #128	@ 0x80
 800098e:	05c9      	lsls	r1, r1, #23
 8000990:	430a      	orrs	r2, r1
 8000992:	601a      	str	r2, [r3, #0]
		return 1;
 8000994:	2301      	movs	r3, #1
 8000996:	e021      	b.n	80009dc <LCD_Busy+0xd0>
	} else {
		GPIOB->BSRR	=  LCD_EN_PIN_LOW;
 8000998:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <LCD_Busy+0xd8>)
 800099a:	2280      	movs	r2, #128	@ 0x80
 800099c:	0512      	lsls	r2, r2, #20
 800099e:	619a      	str	r2, [r3, #24]
		GPIOB->BSRR	=	 LCD_RW_PIN_LOW;
 80009a0:	4b10      	ldr	r3, [pc, #64]	@ (80009e4 <LCD_Busy+0xd8>)
 80009a2:	2280      	movs	r2, #128	@ 0x80
 80009a4:	04d2      	lsls	r2, r2, #19
 80009a6:	619a      	str	r2, [r3, #24]
/**
  * Configuracion de D7 as output push-pull
  */
		GPIOB->PUPDR  &= ~( 0x3UL << 30U );
 80009a8:	4b0e      	ldr	r3, [pc, #56]	@ (80009e4 <LCD_Busy+0xd8>)
 80009aa:	68da      	ldr	r2, [r3, #12]
 80009ac:	4b0d      	ldr	r3, [pc, #52]	@ (80009e4 <LCD_Busy+0xd8>)
 80009ae:	0092      	lsls	r2, r2, #2
 80009b0:	0892      	lsrs	r2, r2, #2
 80009b2:	60da      	str	r2, [r3, #12]
  	GPIOB->OTYPER &= ~( 0x1UL << 15U );
 80009b4:	4b0b      	ldr	r3, [pc, #44]	@ (80009e4 <LCD_Busy+0xd8>)
 80009b6:	685a      	ldr	r2, [r3, #4]
 80009b8:	4b0a      	ldr	r3, [pc, #40]	@ (80009e4 <LCD_Busy+0xd8>)
 80009ba:	490b      	ldr	r1, [pc, #44]	@ (80009e8 <LCD_Busy+0xdc>)
 80009bc:	400a      	ands	r2, r1
 80009be:	605a      	str	r2, [r3, #4]
  	GPIOB->MODER  &= ~( 0x2UL << 30U );
 80009c0:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <LCD_Busy+0xd8>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4b07      	ldr	r3, [pc, #28]	@ (80009e4 <LCD_Busy+0xd8>)
 80009c6:	0052      	lsls	r2, r2, #1
 80009c8:	0852      	lsrs	r2, r2, #1
 80009ca:	601a      	str	r2, [r3, #0]
  	GPIOB->MODER  |=  ( 0x1UL << 30U );
 80009cc:	4b05      	ldr	r3, [pc, #20]	@ (80009e4 <LCD_Busy+0xd8>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b04      	ldr	r3, [pc, #16]	@ (80009e4 <LCD_Busy+0xd8>)
 80009d2:	2180      	movs	r1, #128	@ 0x80
 80009d4:	05c9      	lsls	r1, r1, #23
 80009d6:	430a      	orrs	r2, r1
 80009d8:	601a      	str	r2, [r3, #0]
		return 0;
 80009da:	2300      	movs	r3, #0
	}
}
 80009dc:	0018      	movs	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			@ (mov r8, r8)
 80009e4:	50000400 	.word	0x50000400
 80009e8:	ffff7fff 	.word	0xffff7fff

080009ec <LCD_Pulse_EN>:

//Funcion que genera un pulso en el pin EN del LCD
void LCD_Pulse_EN(void){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	GPIOB->BSRR	=	LCD_EN_PIN_LOW;//
 80009f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <LCD_Pulse_EN+0x34>)
 80009f2:	2280      	movs	r2, #128	@ 0x80
 80009f4:	0512      	lsls	r2, r2, #20
 80009f6:	619a      	str	r2, [r3, #24]
	SysTick_Delay( 1 );
 80009f8:	2001      	movs	r0, #1
 80009fa:	f000 f939 	bl	8000c70 <SysTick_Delay>
	GPIOB->BSRR	=	LCD_EN_PIN_HIGH;
 80009fe:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <LCD_Pulse_EN+0x34>)
 8000a00:	2280      	movs	r2, #128	@ 0x80
 8000a02:	0112      	lsls	r2, r2, #4
 8000a04:	619a      	str	r2, [r3, #24]
	SysTick_Delay( 1 );
 8000a06:	2001      	movs	r0, #1
 8000a08:	f000 f932 	bl	8000c70 <SysTick_Delay>
	GPIOB->BSRR	=	LCD_EN_PIN_LOW;
 8000a0c:	4b04      	ldr	r3, [pc, #16]	@ (8000a20 <LCD_Pulse_EN+0x34>)
 8000a0e:	2280      	movs	r2, #128	@ 0x80
 8000a10:	0512      	lsls	r2, r2, #20
 8000a12:	619a      	str	r2, [r3, #24]
	SysTick_Delay( 1 );
 8000a14:	2001      	movs	r0, #1
 8000a16:	f000 f92b 	bl	8000c70 <SysTick_Delay>
}
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	50000400 	.word	0x50000400

08000a24 <LCD_BarGraphic>:
/*
 * Funcion que muestra un caracter grafico en el LCD
 * en 'value' el valor de su posicion en CGRAM y
 * en 'size' especificamos su tamaño
 */
void LCD_BarGraphic(int16_t value, int16_t size){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	0002      	movs	r2, r0
 8000a2c:	1dbb      	adds	r3, r7, #6
 8000a2e:	801a      	strh	r2, [r3, #0]
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	1c0a      	adds	r2, r1, #0
 8000a34:	801a      	strh	r2, [r3, #0]
	value = value * size / 20;//
 8000a36:	1dbb      	adds	r3, r7, #6
 8000a38:	2200      	movs	r2, #0
 8000a3a:	5e9b      	ldrsh	r3, [r3, r2]
 8000a3c:	1d3a      	adds	r2, r7, #4
 8000a3e:	2100      	movs	r1, #0
 8000a40:	5e52      	ldrsh	r2, [r2, r1]
 8000a42:	4353      	muls	r3, r2
 8000a44:	2114      	movs	r1, #20
 8000a46:	0018      	movs	r0, r3
 8000a48:	f7ff fb58 	bl	80000fc <__divsi3>
 8000a4c:	0003      	movs	r3, r0
 8000a4e:	001a      	movs	r2, r3
 8000a50:	1dbb      	adds	r3, r7, #6
 8000a52:	801a      	strh	r2, [r3, #0]
	for( int16_t i = 0; i < size; i++ ){
 8000a54:	230e      	movs	r3, #14
 8000a56:	18fb      	adds	r3, r7, r3
 8000a58:	2200      	movs	r2, #0
 8000a5a:	801a      	strh	r2, [r3, #0]
 8000a5c:	e01e      	b.n	8000a9c <LCD_BarGraphic+0x78>
		if( value > 5 ){
 8000a5e:	1dbb      	adds	r3, r7, #6
 8000a60:	2200      	movs	r2, #0
 8000a62:	5e9b      	ldrsh	r3, [r3, r2]
 8000a64:	2b05      	cmp	r3, #5
 8000a66:	dd09      	ble.n	8000a7c <LCD_BarGraphic+0x58>
			LCD_Put_Char( 0x05U );
 8000a68:	2005      	movs	r0, #5
 8000a6a:	f7ff fe3b 	bl	80006e4 <LCD_Put_Char>
			value -= 5;
 8000a6e:	1dbb      	adds	r3, r7, #6
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	3b05      	subs	r3, #5
 8000a74:	b29a      	uxth	r2, r3
 8000a76:	1dbb      	adds	r3, r7, #6
 8000a78:	801a      	strh	r2, [r3, #0]
 8000a7a:	e006      	b.n	8000a8a <LCD_BarGraphic+0x66>
		} else {
			LCD_Put_Char( value );
 8000a7c:	1dbb      	adds	r3, r7, #6
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	0018      	movs	r0, r3
 8000a84:	f7ff fe2e 	bl	80006e4 <LCD_Put_Char>
			break;
 8000a88:	e012      	b.n	8000ab0 <LCD_BarGraphic+0x8c>
	for( int16_t i = 0; i < size; i++ ){
 8000a8a:	210e      	movs	r1, #14
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	2200      	movs	r2, #0
 8000a90:	5e9b      	ldrsh	r3, [r3, r2]
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	3301      	adds	r3, #1
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	801a      	strh	r2, [r3, #0]
 8000a9c:	230e      	movs	r3, #14
 8000a9e:	18fa      	adds	r2, r7, r3
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	5e52      	ldrsh	r2, [r2, r1]
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	5e5b      	ldrsh	r3, [r3, r1]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	dbd7      	blt.n	8000a5e <LCD_BarGraphic+0x3a>
		}
	}
}
 8000aae:	46c0      	nop			@ (mov r8, r8)
 8000ab0:	46c0      	nop			@ (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b004      	add	sp, #16
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <main>:
#include "lcd.h"
#include "systicklib.h"

/* Superloop structure */
int main(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
	/* Declarations and Initializations */
  USER_RCC_Init();
 8000abe:	f000 f851 	bl	8000b64 <USER_RCC_Init>
//  USER_TIM3_Init();
  USER_SysTick_Init( );
 8000ac2:	f000 f8bf 	bl	8000c44 <USER_SysTick_Init>
  //USER_UART1_Init();
  USER_GPIO_Init();
 8000ac6:	f000 f88d 	bl	8000be4 <USER_GPIO_Init>
  LCD_Init( );
 8000aca:	f7ff fc03 	bl	80002d4 <LCD_Init>
  uint8_t click;
  uint8_t data;
  uint8_t col = 16;
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	2210      	movs	r2, #16
 8000ad2:	701a      	strb	r2, [r3, #0]
  /* Repetitive block */
  for(;;){
//	  data = USER_UART1_Receive_8bit(); // checar el valor que llega
	  LCD_Clear( );
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f7ff fdef 	bl	80006b8 <LCD_Write_Cmd>
	  LCD_Set_Cursor( 1, 1 );
 8000ada:	2101      	movs	r1, #1
 8000adc:	2001      	movs	r0, #1
 8000ade:	f7ff fe17 	bl	8000710 <LCD_Set_Cursor>
	  LCD_Put_Str( "TE" );
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b54 <main+0x9c>)
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f7ff fe42 	bl	800076e <LCD_Put_Str>
	  LCD_Put_Num( 2003 );
 8000aea:	4b1b      	ldr	r3, [pc, #108]	@ (8000b58 <main+0xa0>)
 8000aec:	0018      	movs	r0, r3
 8000aee:	f7ff fe6c 	bl	80007ca <LCD_Put_Num>
	  LCD_Put_Char( 'B' );
 8000af2:	2042      	movs	r0, #66	@ 0x42
 8000af4:	f7ff fdf6 	bl	80006e4 <LCD_Put_Char>
	  LCD_Put_Str( " SoC" );
 8000af8:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <main+0xa4>)
 8000afa:	0018      	movs	r0, r3
 8000afc:	f7ff fe37 	bl	800076e <LCD_Put_Str>
	  LCD_Set_Cursor( 2, col-- );
 8000b00:	1dfb      	adds	r3, r7, #7
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	1dfa      	adds	r2, r7, #7
 8000b06:	1e59      	subs	r1, r3, #1
 8000b08:	7011      	strb	r1, [r2, #0]
 8000b0a:	0019      	movs	r1, r3
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f7ff fdff 	bl	8000710 <LCD_Set_Cursor>
	  LCD_Put_Str( "Prueba de LCD ");
 8000b12:	4b13      	ldr	r3, [pc, #76]	@ (8000b60 <main+0xa8>)
 8000b14:	0018      	movs	r0, r3
 8000b16:	f7ff fe2a 	bl	800076e <LCD_Put_Str>
	  LCD_BarGraphic( 0, 64 );
 8000b1a:	2140      	movs	r1, #64	@ 0x40
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff ff81 	bl	8000a24 <LCD_BarGraphic>
	  SysTick_Delay( 200 );
 8000b22:	20c8      	movs	r0, #200	@ 0xc8
 8000b24:	f000 f8a4 	bl	8000c70 <SysTick_Delay>
	  GPIOA->ODR ^= (0x1UL<< 5U);
 8000b28:	23a0      	movs	r3, #160	@ 0xa0
 8000b2a:	05db      	lsls	r3, r3, #23
 8000b2c:	695a      	ldr	r2, [r3, #20]
 8000b2e:	23a0      	movs	r3, #160	@ 0xa0
 8000b30:	05db      	lsls	r3, r3, #23
 8000b32:	2120      	movs	r1, #32
 8000b34:	404a      	eors	r2, r1
 8000b36:	615a      	str	r2, [r3, #20]
	  if( col == 0 ){
 8000b38:	1dfb      	adds	r3, r7, #7
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1c9      	bne.n	8000ad4 <main+0x1c>
		  SysTick_Delay( 500 );
 8000b40:	23fa      	movs	r3, #250	@ 0xfa
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	0018      	movs	r0, r3
 8000b46:	f000 f893 	bl	8000c70 <SysTick_Delay>
	      col = 16;
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	2210      	movs	r2, #16
 8000b4e:	701a      	strb	r2, [r3, #0]
	  LCD_Clear( );
 8000b50:	e7c0      	b.n	8000ad4 <main+0x1c>
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	08000d74 	.word	0x08000d74
 8000b58:	000007d3 	.word	0x000007d3
 8000b5c:	08000d78 	.word	0x08000d78
 8000b60:	08000d80 	.word	0x08000d80

08000b64 <USER_RCC_Init>:
	  }
  }
}

void USER_RCC_Init( void ){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	//set gpio output
	RCC->IOPENR = RCC->IOPENR  | (0x1UL << 0U);
 8000b68:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd4 <USER_RCC_Init+0x70>)
 8000b6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b6c:	4b19      	ldr	r3, [pc, #100]	@ (8000bd4 <USER_RCC_Init+0x70>)
 8000b6e:	2101      	movs	r1, #1
 8000b70:	430a      	orrs	r2, r1
 8000b72:	635a      	str	r2, [r3, #52]	@ 0x34
	/* System Clock (SYSCLK) configuration for 48 MHz */
	FLASH->ACR	&= ~( 0x6UL <<  0U );// 2 HCLK cycles latency, if SYSCLK >=24MHz <=48MHz
 8000b74:	4b18      	ldr	r3, [pc, #96]	@ (8000bd8 <USER_RCC_Init+0x74>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b17      	ldr	r3, [pc, #92]	@ (8000bd8 <USER_RCC_Init+0x74>)
 8000b7a:	2106      	movs	r1, #6
 8000b7c:	438a      	bics	r2, r1
 8000b7e:	601a      	str	r2, [r3, #0]
	FLASH->ACR	|=  ( 0x1UL <<  0U );// 2 HCLK cycles latency, if SYSCLK >=24MHz <=48MHz
 8000b80:	4b15      	ldr	r3, [pc, #84]	@ (8000bd8 <USER_RCC_Init+0x74>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b14      	ldr	r3, [pc, #80]	@ (8000bd8 <USER_RCC_Init+0x74>)
 8000b86:	2101      	movs	r1, #1
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	601a      	str	r2, [r3, #0]
	while(( FLASH->ACR & ( 0x7UL <<  0U )) != 0x001UL );// wait until LATENCY[2:0]=001
 8000b8c:	46c0      	nop			@ (mov r8, r8)
 8000b8e:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <USER_RCC_Init+0x74>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2207      	movs	r2, #7
 8000b94:	4013      	ands	r3, r2
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d1f9      	bne.n	8000b8e <USER_RCC_Init+0x2a>
	RCC->CR		&= ~( 0x7UL << 11U );// select HSISYS division factor by 1
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <USER_RCC_Init+0x70>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd4 <USER_RCC_Init+0x70>)
 8000ba0:	490e      	ldr	r1, [pc, #56]	@ (8000bdc <USER_RCC_Init+0x78>)
 8000ba2:	400a      	ands	r2, r1
 8000ba4:	601a      	str	r2, [r3, #0]
	while(!( RCC->CR & ( 0x1UL << 10U )));// wait until HSISYS is stable and ready
 8000ba6:	46c0      	nop			@ (mov r8, r8)
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd4 <USER_RCC_Init+0x70>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	2380      	movs	r3, #128	@ 0x80
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	d0f9      	beq.n	8000ba8 <USER_RCC_Init+0x44>
	RCC->CFGR	&= ~( 0x7UL <<  0U );// select HSISYS as the SYSCLK clock source
 8000bb4:	4b07      	ldr	r3, [pc, #28]	@ (8000bd4 <USER_RCC_Init+0x70>)
 8000bb6:	689a      	ldr	r2, [r3, #8]
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <USER_RCC_Init+0x70>)
 8000bba:	2107      	movs	r1, #7
 8000bbc:	438a      	bics	r2, r1
 8000bbe:	609a      	str	r2, [r3, #8]
	RCC->CFGR	&= ~( 0x1UL << 11U );// select HCLK division factor by 1
 8000bc0:	4b04      	ldr	r3, [pc, #16]	@ (8000bd4 <USER_RCC_Init+0x70>)
 8000bc2:	689a      	ldr	r2, [r3, #8]
 8000bc4:	4b03      	ldr	r3, [pc, #12]	@ (8000bd4 <USER_RCC_Init+0x70>)
 8000bc6:	4906      	ldr	r1, [pc, #24]	@ (8000be0 <USER_RCC_Init+0x7c>)
 8000bc8:	400a      	ands	r2, r1
 8000bca:	609a      	str	r2, [r3, #8]
}
 8000bcc:	46c0      	nop			@ (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	46c0      	nop			@ (mov r8, r8)
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	40022000 	.word	0x40022000
 8000bdc:	ffffc7ff 	.word	0xffffc7ff
 8000be0:	fffff7ff 	.word	0xfffff7ff

08000be4 <USER_GPIO_Init>:

void USER_GPIO_Init(void){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  //SET 4 BIT LEDS AS OUTPUT
  //PINA0 AS OUTPUT
	GPIOA->BSRR   =	0x1UL << 21U; // Reset PA5 low to turn off LED
 8000be8:	23a0      	movs	r3, #160	@ 0xa0
 8000bea:	05db      	lsls	r3, r3, #23
 8000bec:	2280      	movs	r2, #128	@ 0x80
 8000bee:	0392      	lsls	r2, r2, #14
 8000bf0:	619a      	str	r2, [r3, #24]
	  GPIOA->PUPDR  = GPIOA->PUPDR  & ~( 0x3UL << 10U ); // Clear pull-up/pull-down bits for PA5
 8000bf2:	23a0      	movs	r3, #160	@ 0xa0
 8000bf4:	05db      	lsls	r3, r3, #23
 8000bf6:	68da      	ldr	r2, [r3, #12]
 8000bf8:	23a0      	movs	r3, #160	@ 0xa0
 8000bfa:	05db      	lsls	r3, r3, #23
 8000bfc:	490f      	ldr	r1, [pc, #60]	@ (8000c3c <USER_GPIO_Init+0x58>)
 8000bfe:	400a      	ands	r2, r1
 8000c00:	60da      	str	r2, [r3, #12]
	  GPIOA->OTYPER = GPIOA->OTYPER & ~( 0x1UL <<  5U ); // Clear output type bit for PA5
 8000c02:	23a0      	movs	r3, #160	@ 0xa0
 8000c04:	05db      	lsls	r3, r3, #23
 8000c06:	685a      	ldr	r2, [r3, #4]
 8000c08:	23a0      	movs	r3, #160	@ 0xa0
 8000c0a:	05db      	lsls	r3, r3, #23
 8000c0c:	2120      	movs	r1, #32
 8000c0e:	438a      	bics	r2, r1
 8000c10:	605a      	str	r2, [r3, #4]
	  GPIOA->MODER  = GPIOA->MODER  & ~( 0x2UL << 10U ); // Set PA5 as output
 8000c12:	23a0      	movs	r3, #160	@ 0xa0
 8000c14:	05db      	lsls	r3, r3, #23
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	23a0      	movs	r3, #160	@ 0xa0
 8000c1a:	05db      	lsls	r3, r3, #23
 8000c1c:	4908      	ldr	r1, [pc, #32]	@ (8000c40 <USER_GPIO_Init+0x5c>)
 8000c1e:	400a      	ands	r2, r1
 8000c20:	601a      	str	r2, [r3, #0]
	  GPIOA->MODER  = GPIOA->MODER  |  ( 0x1UL << 10U ); // Set PA5 as output
 8000c22:	23a0      	movs	r3, #160	@ 0xa0
 8000c24:	05db      	lsls	r3, r3, #23
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	23a0      	movs	r3, #160	@ 0xa0
 8000c2a:	05db      	lsls	r3, r3, #23
 8000c2c:	2180      	movs	r1, #128	@ 0x80
 8000c2e:	00c9      	lsls	r1, r1, #3
 8000c30:	430a      	orrs	r2, r1
 8000c32:	601a      	str	r2, [r3, #0]
//	GPIOA->OTYPER = GPIOA->OTYPER & ~(0x1UL << 1U);
//	GPIOA->PUPDR = GPIOA->PUPDR & ~(0x3UL << 2U);
//	// Reset the led to be turn off
//  GPIOA->ODR = GPIOA->ODR & ~(0x1UL<< 1U);

}
 8000c34:	46c0      	nop			@ (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			@ (mov r8, r8)
 8000c3c:	fffff3ff 	.word	0xfffff3ff
 8000c40:	fffff7ff 	.word	0xfffff7ff

08000c44 <USER_SysTick_Init>:
#include <stdint.h>
#include "main.h"
#include "systicklib.h"

void USER_SysTick_Init( void ){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  // Reloj del sistema = 48 MHz
  // SysTick es de 24 bits, así que máximo 2^24-1 = 16,777,215
  // Para 1ms: 48,000,000 / 1000 ciclos
  Systick->RVR  = 48000 - 1;//          Carga para 1ms
 8000c48:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <USER_SysTick_Init+0x24>)
 8000c4a:	4a08      	ldr	r2, [pc, #32]	@ (8000c6c <USER_SysTick_Init+0x28>)
 8000c4c:	605a      	str	r2, [r3, #4]
  Systick->CVR  = 0;//                  Reinicia el contador
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <USER_SysTick_Init+0x24>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  Systick->CSR |=  ( 0x1UL <<  2U );//  Selecciona el reloj del procesador como el Systick
 8000c54:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <USER_SysTick_Init+0x24>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4b03      	ldr	r3, [pc, #12]	@ (8000c68 <USER_SysTick_Init+0x24>)
 8000c5a:	2104      	movs	r1, #4
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	601a      	str	r2, [r3, #0]
}
 8000c60:	46c0      	nop			@ (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			@ (mov r8, r8)
 8000c68:	e000e010 	.word	0xe000e010
 8000c6c:	0000bb7f 	.word	0x0000bb7f

08000c70 <SysTick_Delay>:

void SysTick_Delay( uint32_t time ) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  Systick->CSR |=  ( 0x1UL <<  0U );//  Inicia el Systick
 8000c78:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <SysTick_Delay+0x4c>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cbc <SysTick_Delay+0x4c>)
 8000c7e:	2101      	movs	r1, #1
 8000c80:	430a      	orrs	r2, r1
 8000c82:	601a      	str	r2, [r3, #0]
  for(uint32_t i = 0; i < time; i++){
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	e009      	b.n	8000c9e <SysTick_Delay+0x2e>
    // Espera a que el bit COUNTFLAG se ponga en 1 (cuando se desborda)
    while(!( Systick->CSR & ( 0x1UL << 16U )));
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000cbc <SysTick_Delay+0x4c>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	2380      	movs	r3, #128	@ 0x80
 8000c92:	025b      	lsls	r3, r3, #9
 8000c94:	4013      	ands	r3, r2
 8000c96:	d0f9      	beq.n	8000c8c <SysTick_Delay+0x1c>
  for(uint32_t i = 0; i < time; i++){
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d3f1      	bcc.n	8000c8a <SysTick_Delay+0x1a>
  }
  Systick->CSR &= ~( 0x1UL <<  0U );//  Detiene el SysTick
 8000ca6:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <SysTick_Delay+0x4c>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	4b04      	ldr	r3, [pc, #16]	@ (8000cbc <SysTick_Delay+0x4c>)
 8000cac:	2101      	movs	r1, #1
 8000cae:	438a      	bics	r2, r1
 8000cb0:	601a      	str	r2, [r3, #0]
}
 8000cb2:	46c0      	nop			@ (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b004      	add	sp, #16
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	46c0      	nop			@ (mov r8, r8)
 8000cbc:	e000e010 	.word	0xe000e010

08000cc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cc0:	480d      	ldr	r0, [pc, #52]	@ (8000cf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cc2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cc4:	e000      	b.n	8000cc8 <Reset_Handler+0x8>
 8000cc6:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc8:	480c      	ldr	r0, [pc, #48]	@ (8000cfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000cca:	490d      	ldr	r1, [pc, #52]	@ (8000d00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d04 <LoopForever+0xe>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d0c <LoopForever+0x16>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cee:	f000 f811 	bl	8000d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cf2:	f7ff fee1 	bl	8000ab8 <main>

08000cf6 <LoopForever>:

LoopForever:
  b LoopForever
 8000cf6:	e7fe      	b.n	8000cf6 <LoopForever>
  ldr   r0, =_estack
 8000cf8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d04:	08000dd8 	.word	0x08000dd8
  ldr r2, =_sbss
 8000d08:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d0c:	2000001c 	.word	0x2000001c

08000d10 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC_IRQHandler>
	...

08000d14 <__libc_init_array>:
 8000d14:	b570      	push	{r4, r5, r6, lr}
 8000d16:	2600      	movs	r6, #0
 8000d18:	4c0c      	ldr	r4, [pc, #48]	@ (8000d4c <__libc_init_array+0x38>)
 8000d1a:	4d0d      	ldr	r5, [pc, #52]	@ (8000d50 <__libc_init_array+0x3c>)
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	10a4      	asrs	r4, r4, #2
 8000d20:	42a6      	cmp	r6, r4
 8000d22:	d109      	bne.n	8000d38 <__libc_init_array+0x24>
 8000d24:	2600      	movs	r6, #0
 8000d26:	f000 f819 	bl	8000d5c <_init>
 8000d2a:	4c0a      	ldr	r4, [pc, #40]	@ (8000d54 <__libc_init_array+0x40>)
 8000d2c:	4d0a      	ldr	r5, [pc, #40]	@ (8000d58 <__libc_init_array+0x44>)
 8000d2e:	1b64      	subs	r4, r4, r5
 8000d30:	10a4      	asrs	r4, r4, #2
 8000d32:	42a6      	cmp	r6, r4
 8000d34:	d105      	bne.n	8000d42 <__libc_init_array+0x2e>
 8000d36:	bd70      	pop	{r4, r5, r6, pc}
 8000d38:	00b3      	lsls	r3, r6, #2
 8000d3a:	58eb      	ldr	r3, [r5, r3]
 8000d3c:	4798      	blx	r3
 8000d3e:	3601      	adds	r6, #1
 8000d40:	e7ee      	b.n	8000d20 <__libc_init_array+0xc>
 8000d42:	00b3      	lsls	r3, r6, #2
 8000d44:	58eb      	ldr	r3, [r5, r3]
 8000d46:	4798      	blx	r3
 8000d48:	3601      	adds	r6, #1
 8000d4a:	e7f2      	b.n	8000d32 <__libc_init_array+0x1e>
 8000d4c:	08000dd0 	.word	0x08000dd0
 8000d50:	08000dd0 	.word	0x08000dd0
 8000d54:	08000dd4 	.word	0x08000dd4
 8000d58:	08000dd0 	.word	0x08000dd0

08000d5c <_init>:
 8000d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d62:	bc08      	pop	{r3}
 8000d64:	469e      	mov	lr, r3
 8000d66:	4770      	bx	lr

08000d68 <_fini>:
 8000d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d6a:	46c0      	nop			@ (mov r8, r8)
 8000d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d6e:	bc08      	pop	{r3}
 8000d70:	469e      	mov	lr, r3
 8000d72:	4770      	bx	lr
